[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Justyn Rodrigues",
    "section": "",
    "text": "Some text here.\n\n\n\n\n\n\nJust keep in mind\n\n\n\nAs I have started learning how to make blogs and the front-end side of it, I have made many errors with my blog so there might be a few things broken at the moment. If you notice an problem, feel free to create an issue on the  repo. Thanks!"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "personal-blog",
    "section": "",
    "text": "Colouring Text in ggplot2\n\n\n\n\n\n\n\nR\n\n\nggplot\n\n\n\n\nHow to colour text in ggplot.\n\n\n\n\n\n\nMar 26, 2022\n\n\nJustyn Rodrigues\n\n\n\n\n\n\n  \n\n\n\n\nCombinations-vs-Permutation\n\n\n\n\n\n\n\nProbability\n\n\n\n\nComparing combinations and permutations.\n\n\n\n\n\n\nDec 26, 2021\n\n\nJustyn Rodrigues\n\n\n\n\n\n\n  \n\n\n\n\nBarplots\n\n\n\n\n\n\n\nR\n\n\nData Viz\n\n\n\n\nSome different ways you can adjust barplots.\n\n\n\n\n\n\nFeb 11, 2021\n\n\nJustyn Rodrigues\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/combinations/post.html",
    "href": "posts/combinations/post.html",
    "title": "Combinations-vs-Permutation",
    "section": "",
    "text": "Note\n\n\n\nI do not remember why I wrote this post back in 2021."
  },
  {
    "objectID": "posts/combinations/post.html#possible-variations",
    "href": "posts/combinations/post.html#possible-variations",
    "title": "Combinations-vs-Permutation",
    "section": "Possible Variations",
    "text": "Possible Variations\n\nWhen the order doesn’t matter, it is a combination;\nWhen the order does matter it is a permutation."
  },
  {
    "objectID": "posts/combinations/post.html#repetition",
    "href": "posts/combinations/post.html#repetition",
    "title": "Combinations-vs-Permutation",
    "section": "Repetition",
    "text": "Repetition\n\nRepetition could be allowed in a situation where you wanted to know the character in a password (you can have multiple letters or numbers);\nNo repetition is when there is no replacement in the values such as lotto numbers or selecting a seat (you cannot sit where somebody is already sitting)."
  },
  {
    "objectID": "posts/combinations/post.html#example",
    "href": "posts/combinations/post.html#example",
    "title": "Combinations-vs-Permutation",
    "section": "Example",
    "text": "Example\nI had a gift card where two of the numbers were scratched off as I peeled back the scratchy thing. I did not want to contact the store if I could avoid that.\nFor example,\nA3E# - 3JH# - 45HL\nwhere the hashtags are the two values I can not see clearly. There are 36 possible values for each (26 letters and 10 numbers), so figuring this out via bruteforce will take a long time. But how many possible numbers could it be?\nWhere\n\\[\n\\text{ Characters to choose from} = n\n\\]\n\\[\nn = 36\n\\]\n\\[\n\\text{ Characters selected} = k\n\\]\n\\[\nk = 2\n\\]"
  },
  {
    "objectID": "posts/combinations/post.html#combinations",
    "href": "posts/combinations/post.html#combinations",
    "title": "Combinations-vs-Permutation",
    "section": "Combinations",
    "text": "Combinations\nPretending that order does not matter for our code or password, we could calculate the combinations by\n\\[\nC_{k}^{\\prime}(n) = \\binom{n + k  - 1}{k}\n\\]\n\\[\nC_{2}^{\\prime}(36) = C_{2}(36 +2 - 1)\n\\]\n\\[\nC_{2}(37) = \\binom{37}{2} = \\frac{37!}{2!(37 - 2)!} = \\frac{37 \\cdot 36}{2 \\cdot 1} = 666\n\\]\nIf order did not matter and we could not have repetition then we would have\n\\[\nC_{k}(n) = \\binom{n}{k} = \\frac{n!}{k!(n - k)!}\n\\]\n\\[\nC_{2}(36) = \\binom{36}{2} = \\frac{36!}{2!(36 - 2)!} = \\frac{36 \\cdot 35}{2 \\cdot 1} = 630\n\\]"
  },
  {
    "objectID": "posts/combinations/post.html#permutation",
    "href": "posts/combinations/post.html#permutation",
    "title": "Combinations-vs-Permutation",
    "section": "Permutation",
    "text": "Permutation\nThis problem will be a permutation problem since the order is important since A and 5 is not the same as 5 and A due to both values being independent from each other. For example,\nA3EA - 3JH5 - 45HL \\(!=\\) A3E5 - 3JHA - 45HL\nThis is a simple solution since repetition is allowed. For example, both values could be the same. As such\n\\[\n\\text{Permutation} = P\n\\]\n\\[\nP_{k}^{\\prime} = n^{k}\n\\]\n\\[\nP_{2}^{\\prime} = 36^{2} = 1296\n\\]\nHowever, lets just say in this situation repetition is not allowed. This would mean if the first character is A then the second character cannot be A. While this may seem like an obscure example in this example, imagine if the code was not entirely scratched off and you were certain that the two values were different from each other.\n\\[\nP_{k}(n) = \\frac{n!}{(n - k)}!\n\\]\n\\[\nP_{2}(36) = \\frac{36!}{(36-2)} = \\frac{36!}{34!} = 36 \\cdot 35 = 1260\n\\]\nThis should be fairly intuitive since 1296 - 1260 = 36."
  },
  {
    "objectID": "posts/combinations/post.html#passwords",
    "href": "posts/combinations/post.html#passwords",
    "title": "Combinations-vs-Permutation",
    "section": "Passwords",
    "text": "Passwords\nTo finish here are the amount of unique combinations for a password of 6 characters\n\n\n\n\n\n\n\n\nCharacters Used\nPossible Characters\nUnique Permutations\n\n\n\n\na - z\n26\n308,915,776\n\n\na - z & 0 - 9\n36\n2,176,782,336\n\n\na - z & A - Z\n52\n19,770,609,664\n\n\na - z & A - Z & 0 - 9\n62\n56,800,235,584\n\n\na - z & A - Z & 0 - 9 & !@#$%^&*()+-\n74\n164,206,490,176\n\n\n\nand 8 characters\n\n\n\n\n\n\n\n\nCharacters Used\nPossible Characters\nUnique Permutations\n\n\n\n\na - z\n26\n208,827,064,576\n\n\na - z & 0 - 9\n36\n2,821,109,907,456\n\n\na - z & A - Z\n52\n53,459,728,531,456\n\n\na - z & A - Z & 0 - 9\n62\n218,340,105,584,896\n\n\na - z & A - Z & 0 - 9 & !@#$%^&*()+-\n74\n899,194,740,203,776\n\n\n\nIf you want to calculate these values in R or Python you can simply do it via\n\nRPython\n\n\nlibrary(tidyr)\n\ncrossing(\n  # total characters \n  character_n = c(26, 36, 52, 62, 74),\n  # password length\n  length = c(6, 7, 8, 10, 12), \n  possible_values = character_n ^ length\n)\n\n\nimport pandas as pd\n\ncharacter_n = [26, 36, 52, 62, 74]\nlength = [6, 7, 8, 10, 12]\n\npd.DataFrame({\n    'character_n': character_n,\n    'length': length,\n    'possible_values': [n ** l for n, l in zip(character_n, length)]\n})\n\n#data = [{'character_n': n, 'length': l, 'possible_values': n ** l} for n, l in zip(character_n, length)]\n#pd.DataFrame.from_records(data)"
  },
  {
    "objectID": "posts/barplots/post.html",
    "href": "posts/barplots/post.html",
    "title": "Barplots",
    "section": "",
    "text": "Note\n\n\n\nI have currently commented out my custom theme since I have not set up custom fonts yet on this computer.\n\n\nI have been planning on writing a post for a few weeks, but I keep changing my mind on what I want to write about. I have been going through my Github profile lately and tidying it up. It has made me realise how much code I had stashed away that I did not need, so I am trying to get into the habit of only keeping code that is available on Github to keep organised and accountable.\nI have also been doing a lot of NFL data viz, which I found a lot harder than I thought it would be. I’ll share them at a later date, but I thought I would do a quick post at 11pm at some tricks I learnt with using text labels. I thought I would use the penguins dataset from palmerpenguins since it does not appear to be as common as others such as mtcars.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n# personal package with plotting theme. \n# I wrote it at the start of 2021, so it might have some issues\n#library(becausejustynfun) \n\npenguins &lt;- palmerpenguins::penguins\n\nEven though I am using the cleaned version, I find it good practice to use glimpse() just to be safe.\n\npenguins |&gt; glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nNext, I am checking for missing values.\n\n#penguins |&gt;\n#  summarise(across(everything(), ~sum(is.na(.))))\n\npenguins |&gt; map_dbl(~sum(is.na(.)))\n\n          species            island    bill_length_mm     bill_depth_mm \n                0                 0                 2                 2 \nflipper_length_mm       body_mass_g               sex              year \n                2                 2                11                 0 \n\n\nTo see how I will deal with them I like to see the unique values across each column.\n\n#penguins |&gt;\n#  summarise(across(everything(), n_distinct))\n\npenguins |&gt; \n  map_dbl(~n_distinct(.))\n\n          species            island    bill_length_mm     bill_depth_mm \n                3                 3               165                81 \nflipper_length_mm       body_mass_g               sex              year \n               56                95                 3                 3 \n\n\nI’ll have a glance at the missing values to see if they are important.\n\npenguins |&gt; \n  filter(if_any(everything(), is.na)) \n\n# A tibble: 11 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           NA            NA                  NA          NA\n 2 Adelie  Torgersen           34.1          18.1               193        3475\n 3 Adelie  Torgersen           42            20.2               190        4250\n 4 Adelie  Torgersen           37.8          17.1               186        3300\n 5 Adelie  Torgersen           37.8          17.3               180        3700\n 6 Adelie  Dream               37.5          18.9               179        2975\n 7 Gentoo  Biscoe              44.5          14.3               216        4100\n 8 Gentoo  Biscoe              46.2          14.4               214        4650\n 9 Gentoo  Biscoe              47.3          13.8               216        4725\n10 Gentoo  Biscoe              44.5          15.7               217        4875\n11 Gentoo  Biscoe              NA            NA                  NA          NA\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nGiven the NA values were low, I will just drop them.\n\npenguins &lt;- penguins |&gt;\n  na.exclude()\n\n#to check\nmap_dfc(penguins, sum(is.na(penguins)))\n\n# A tibble: 0 × 0\n\n#map_df(penguins, .f = sum(is.na(penguins)))\n\nI am going to create a seperate df with the count values. You can easily just use add_count(), or just rely on ggplot2 to do that for you, but later on we are going to make more adjustments to the df that will make it easier if there is a mistake.\n\n#df of counts\npenguins_sum &lt;- penguins |&gt;\n  count(species, sort = TRUE) |&gt; \n  mutate(\n    species = fct_rev(fct_inorder(species)),\n    perc = paste0(sprintf(\"%4.1f\", n / sum(n) * 100), \"%\") # percentage label\n    )\n\n#scales alternative\n#mutate(perc = scales::percent(n / sum(n), accuracy = .1, trim = FALSE))\n\n\npenguins_sum |&gt;\nggplot(aes(x = n, y = species)) +\n  geom_col(fill = \"gray70\") +\n  ## add percentage labels\n  geom_text(aes(label = perc)) \n\n\n\n\n\n## prepare non-aggregated data set with lumped and ordered factors\npenguins_fct &lt;- penguins |&gt; \n  dplyr::mutate(\n    total = dplyr::n(),\n    species = stringr::str_to_title(species),\n    species = forcats::fct_rev(forcats::fct_infreq(species))\n  )\n\npenguins_sum &lt;- penguins_sum |&gt; \n  mutate(\n    colour = case_when(\n      row_number() == 1 ~ \"#468499\",\n      row_number() == 2 ~ \"#E697AC\",\n      row_number() == 3 ~ \"#81CDE6\",\n      ## all others should be gray\n      TRUE ~ \"gray70\"\n    )\n  )\n\nThis is one approach were we conditionally colour each variable of choice.\n\npenguins_sum |&gt;\n  ggplot(aes(\n    x = n, \n    y = species, \n    fill = colour)) +\n  geom_col() +\n  geom_text(\n    aes(label = perc),\n    hjust = 1, nudge_x = -.5\n  ) +\n  ## add custom colors\n  scale_fill_identity(guide = \"none\") \n\n\n\n\nWe also have a lot of control over the font used. There can be challenges when installing a font onto your system for the first time, but I might go through that another time since I struggled with it for quite a while. Maybe I am just a silly billy.\n\npenguins_sum |&gt;\nggplot(aes(\n  x = n, \n  y = species, \n  fill = colour)) +\n  geom_col() +\n  geom_text(\n    aes(label = perc), \n    hjust = 1, nudge_x = -.5,\n    size = 4, fontface = \"bold\"\n  ) +\n  ## reduce spacing between labels and bars\n  scale_x_continuous(expand = c(.01, .01)) +\n  scale_fill_identity(guide = \"none\") \n\n\n\n\nSometimes the colour of the font does not match well with the plot. This can be challenging when you have more than a few colours, so you might not want to manually adjust every single one. One option is to add white to the label with fill = \"white\".\n\npenguins_sum |&gt;\n  ggplot(aes(\n    x = n, \n    y = species, \n    fill = colour)) +\n  geom_col() +\n  geom_label(\n    aes(label = perc), \n    hjust = 0.95, nudge_x = -.5,\n    size = 4, fontface = \"bold\",\n    ## turn into white box without outline\n    fill = \"white\", label.size = 0\n  ) +\n  scale_x_continuous(expand = c(.01, .01)) +\n  scale_fill_identity(guide = \"none\") +\n  theme(\n    axis.text.y = element_text(size = 14, hjust = 1),\n    plot.margin = margin(rep(15, 4))\n  )\n\n\n\n\nLikewise, it is possible to adjust the position of the text labels conditionally. I think ggplot2 biggest challenge is learning what you can do.\n\npenguins_sum |&gt; \n  mutate(\n    ## set justification based on data \n    ## so that only the first label is placed inside\n    place = if_else(row_number() == 1, 1, 0),\n    ## add some spacing to labels since we cant use nudge_x anymore\n    perc = paste(\" \", perc, \" \")\n  ) |&gt; \n  ggplot(aes(\n    x = n, \n    y = species, \n    fill = colour)) +\n  geom_col() +\n  geom_text(\n    aes(label = perc, hjust = place), \n    fontface = \"bold\"\n  ) +\n  scale_x_continuous(expand = c(.01, .01)) +\n  scale_fill_identity(guide = \"none\") +\n  theme(\n    plot.margin = margin(rep(15, 4))\n  )\n\n\n\n\nYou can use different positions of text labels to highlight things of interest, or sometimes adjusting it makes it easier to work around other features of the plot such as the background or legend.\nThat is all for today. I’ll try to post next week about more data viz.\n\n\n\n\n\n\nSession Info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.2      forcats_0.5.1        stringr_1.5.0       \n [4] dplyr_1.1.1          purrr_1.0.1          readr_2.1.4         \n [7] tidyr_1.3.0          tibble_3.2.1         ggplot2_3.4.1       \n[10] tidyverse_2.0.0      palmerpenguins_0.1.1\n\nloaded via a namespace (and not attached):\n [1] compiler_4.1.2    pillar_1.9.0      tools_4.1.2       digest_0.6.31    \n [5] timechange_0.2.0  jsonlite_1.8.4    evaluate_0.20     lifecycle_1.0.3  \n [9] gtable_0.3.3      pkgconfig_2.0.3   rlang_1.1.0       cli_3.6.1        \n[13] rstudioapi_0.14   yaml_2.3.7        xfun_0.37         fastmap_1.1.1    \n[17] withr_2.5.0       knitr_1.42        hms_1.1.3         generics_0.1.3   \n[21] vctrs_0.6.1       htmlwidgets_1.6.2 grid_4.1.2        tidyselect_1.2.0 \n[25] glue_1.6.2        R6_2.5.1          fansi_1.0.4       rmarkdown_2.20   \n[29] farver_2.1.1      tzdb_0.3.0        magrittr_2.0.3    scales_1.2.1     \n[33] htmltools_0.5.5   colorspace_2.1-0  labeling_0.4.2    utf8_1.2.3       \n[37] stringi_1.7.12    munsell_0.5.0"
  },
  {
    "objectID": "posts/ggplot_colour_text/post.html",
    "href": "posts/ggplot_colour_text/post.html",
    "title": "Colouring Text in ggplot2",
    "section": "",
    "text": "One of the more underrated options in data viz is to colour text. You can use this to highlight important information, or to improve how the viz looks. It is quite simple with ggtext, so I will not go into too much detail.\n\nlibrary(tidyverse)\nlibrary(ggtext) \nlibrary(grid)\nlibrary(glue)\n\nI originally wrote this post at 10pm before bed, so I used mtcars to allow myself to get this done quickly. To have the colour applied to the text, you need to specify element_markdown() in the theme() function.\n\nmtcars |&gt;\n  ggplot(aes(\n    x = wt, \n    y = mpg, \n    colour = factor(cyl)\n  )) +\n  geom_point() +\n  scale_colour_brewer(palette = \"Set2\") +\n  labs(\n    x = \"&lt;span style = 'color:#93C1DE'&gt;**wt**&lt;/span&gt;\",\n    y = \"&lt;span style = 'color:#2ca25f'&gt;**mpg**&lt;/span&gt;\",\n    title = \"Lower &lt;span style='color:#93C1DE'&gt;**wt**&lt;/span&gt; tends to increase the amount of &lt;span style='color:#2ca25f'&gt;**mpg**&lt;/span&gt;\",\n    colour = \"\"\n  ) +\n  theme(\n    plot.title = element_markdown(),\n    axis.title.x = element_markdown(),\n    axis.title.y = element_markdown()\n  )\n\n\n\n\nLike I mentioned earlier, you can highlight a particular feature of interest by colouring a particular column or data point, then matching that colour in the title. To only have one of the columns coloured, you need to do a little bit more work, but it is still quite simple.\n\niris |&gt;\n  group_by(Species) |&gt;\n  summarise(mean_petal_width = mean(Petal.Width), .groups = \"drop\") |&gt;\n  mutate(\n    colour = c(\"lightgray\", \"lightgray\", \"#0072B2\"), \n    name = glue(\"&lt;i style='color:{colour}'&gt;{Species}&lt;/i&gt;\"),\n    name = fct_reorder(name, mean_petal_width)\n  ) |&gt;\n  ggplot(aes(\n    x = name,\n    y = mean_petal_width,\n    fill = colour\n  )) +\n  geom_col() +\n  hrbrthemes::theme_ipsum() +\n  scale_fill_identity() +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"&lt;span style = 'color: #43a2ca;'&gt;Virginica irises&lt;/span&gt; have the largest average sepal width\"\n  ) +\n  theme(\n    plot.title = element_markdown(),\n    axis.text.x = element_markdown(),\n    legend.position = \"none\"\n  )\n\n\n\n\nLastly, to have all the columns coloured, you essentially do the same thing. You just need to make sure that the colour column is a factor, and that the name column is ordered.\n\niris |&gt;\n  group_by(Species) |&gt;\n  summarise(mean_petal_width = mean(Petal.Width), .groups = \"drop\") |&gt;\n  mutate(\n    colour = c(\"#91529e\", \"#009E73\", \"#0072B2\"), #009E73\n    name = glue(\"&lt;i style='color:{colour}'&gt;{Species}&lt;/i&gt;\"),\n    name = fct_reorder(name, mean_petal_width)\n  ) |&gt;\n  ggplot(aes(\n    x = name,\n    y = mean_petal_width,\n    fill = colour\n  )) +\n  geom_col() +\n  hrbrthemes::theme_ipsum() +\n  scale_fill_identity() +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"&lt;span style = 'color: #43a2ca;'&gt;Virginica irises&lt;/span&gt; have the largest average sepal width\"\n  ) +\n  theme(\n    plot.title = element_markdown(),\n    axis.text.x = element_markdown(),\n    legend.position = \"none\"\n  )\n\n\n\n\n\n\n\n\n\n\nSession Info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] glue_1.6.2      ggtext_0.1.2    lubridate_1.9.2 forcats_0.5.1  \n [5] stringr_1.5.0   dplyr_1.1.1     purrr_1.0.1     readr_2.1.4    \n [9] tidyr_1.3.0     tibble_3.2.1    ggplot2_3.4.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.10             digest_0.6.31           utf8_1.2.3             \n [4] mime_0.12               R6_2.5.1                evaluate_0.20          \n [7] pillar_1.9.0            gdtools_0.3.2           rlang_1.1.0            \n[10] hrbrthemes_0.8.6        curl_5.0.0              rstudioapi_0.14        \n[13] extrafontdb_1.0         rmarkdown_2.20          labeling_0.4.2         \n[16] extrafont_0.19          htmlwidgets_1.6.2       munsell_0.5.0          \n[19] gridtext_0.1.5          shiny_1.7.4             httpuv_1.6.9           \n[22] compiler_4.1.2          xfun_0.37               systemfonts_1.0.4      \n[25] pkgconfig_2.0.3         gfonts_0.2.0            htmltools_0.5.5        \n[28] tidyselect_1.2.0        fontBitstreamVera_0.1.1 httpcode_0.3.0         \n[31] fansi_1.0.4             later_1.3.0             crayon_1.5.2           \n[34] tzdb_0.3.0              withr_2.5.0             commonmark_1.9.0       \n[37] crul_1.3                xtable_1.8-4            jsonlite_1.8.4         \n[40] Rttf2pt1_1.3.12         gtable_0.3.3            lifecycle_1.0.3        \n[43] magrittr_2.0.3          scales_1.2.1            cachem_1.0.7           \n[46] cli_3.6.1               stringi_1.7.12          farver_2.1.1           \n[49] promises_1.2.0.1        xml2_1.3.3              ellipsis_0.3.2         \n[52] generics_0.1.3          vctrs_0.6.1             RColorBrewer_1.1-3     \n[55] tools_4.1.2             markdown_1.5            fontquiver_0.2.1       \n[58] hms_1.1.3               fastmap_1.1.1           yaml_2.3.7             \n[61] timechange_0.2.0        colorspace_2.1-0        fontLiberation_0.1.0   \n[64] memoise_2.0.1           knitr_1.42"
  }
]